{"version":3,"file":"static/js/3169.bb242f51.chunk.js","mappings":"4QAOQA,EAAaC,EAAAA,EAAAA,SACbC,EAAYC,EAAAA,EAAAA,QACZC,EAAUC,EAAAA,EAAAA,MA2ElB,UAzEuB,WACnB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GAEFE,GADeC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBC,SACiBC,MAAK,SAAAC,GAAC,OAAIA,EAAEP,KAAOQ,SAASR,EAAG,IAExD,GAA8BS,EAAAA,EAAAA,WAAgB,OAAPP,QAAO,IAAPA,OAAO,EAAPA,EAASQ,UAAW,IAAG,eAAvDA,EAAO,KAAEC,EAAU,KAC1B,GAAwBF,EAAAA,EAAAA,UAAS,IAAG,eAA7BG,EAAI,KAAEC,EAAO,KACpB,GAA8BJ,EAAAA,EAAAA,UAAS,IAAG,eAAnCK,EAAO,KAAEC,EAAU,KAQ1B,OAAKb,GAGD,iBAAKc,UAAU,aAAY,WAEvB,iBAAKA,UAAU,wCAAuC,WAClD,SAAClB,EAAK,CAACmB,MAAO,EAAE,SAAEf,EAAQgB,SAC1B,0BAAG,iCAAY,IAAEhB,EAAQiB,SACzB,0BAAG,iCAAY,IAAEjB,EAAQkB,SACzB,0BAAG,oCAAe,IAAElB,EAAQmB,QAAQC,KAAK,UAEzC,UAAC,IAAI,CAACC,iBAAiB,IAAG,WAEtB,UAAC3B,EAAO,CAAC4B,IAAI,UAAS,WAClB,SAAC9B,EAAQ,CACL+B,KAAM,EACNC,MAAOhB,EACPiB,SAAU,SAAAC,GAAC,OAAIjB,EAAWiB,EAAEC,OAAOH,MAAM,EACzCI,YAAY,kCAEhB,SAAC,KAAM,CAACV,KAAK,UAAUJ,UAAU,OAAM,4BAPhB,MAW3B,UAACpB,EAAO,CAAC4B,IAAI,YAAW,WACpB,SAAC,IAAM,WACH,SAAC,KAAM,CAACO,MAAM,SAAC,IAAc,IAAI,gCAErC,SAAC,KAAI,CACDf,UAAU,OACVgB,WAAY9B,EAAQ+B,WAAa,GACjCC,WAAY,SAACC,EAAKC,GAAC,OAAK,SAAC,UAAS,UAAED,GAAgB,MAP/B,YAcrC,iBAAKnB,UAAU,sDAAqD,WAChE,SAAClB,EAAK,CAACmB,MAAO,EAAE,2BAChB,gBAAKD,UAAU,qDAAoD,SAC9DJ,EAAKyB,KAAI,SAACC,EAAGC,GAAG,OACb,0BAAa,yBAAID,EAAEE,OAAM,OAAM,IAAEF,EAAEG,KAAI,KAAE,iCAASH,EAAEI,KAAI,SAAhDH,EAA8D,OAG9E,iBAAKvB,UAAU,kBAAiB,WAC5B,SAAC,IAAK,CACFU,MAAOZ,EACPa,SAAU,SAAAC,GAAC,OAAIb,EAAWa,EAAEC,OAAOH,MAAM,EACzCI,YAAY,qBAEhB,SAAC,KAAM,CAACC,MAAM,SAAC,IAAY,IAAKY,QAzDvB,WAChB7B,EAAQ8B,SACb/B,EAAQ,GAAD,eAAKD,GAAI,CAAE,CAAE6B,KAAM3B,EAAS0B,OAAQ,MAAOE,MAAM,IAAIG,MAAOC,yBACnE/B,EAAW,IACf,cAEqB,4CAwDzB,C","sources":["views/app-views/apps/meetings/MeetingDetails/index.js"],"sourcesContent":["// MeetingDetails.js\nimport { useParams } from \"react-router-dom\";\nimport { useContext, useState } from \"react\";\nimport { MeetingContext } from \"views/app-views/apps/MeetingContext\";\nimport { Input, Button, Upload, Tabs, List, Typography } from \"antd\";\nimport { UploadOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { TextArea } = Input;\nconst { TabPane } = Tabs;\nconst { Title } = Typography;\n\nconst MeetingDetails = () => {\n    const { id } = useParams();\n    const { meetings } = useContext(MeetingContext);\n    const meeting = meetings.find(m => m.id === parseInt(id));\n\n    const [minutes, setMinutes] = useState(meeting?.minutes || \"\");\n    const [chat, setChat] = useState([]);\n    const [message, setMessage] = useState(\"\");\n\n    const handleAddMessage = () => {\n        if (!message.trim()) return;\n        setChat([...chat, { text: message, sender: \"You\", time: new Date().toLocaleTimeString() }]);\n        setMessage(\"\");\n    };\n\n    if (!meeting) return <p>Meeting not found</p>;\n\n    return (\n        <div className=\"flex gap-4\">\n            {/* Left side - main content */}\n            <div className=\"flex-1 p-4 bg-white rounded-xl shadow\">\n                <Title level={3}>{meeting.title}</Title>\n                <p><b>Date:</b> {meeting.date}</p>\n                <p><b>Type:</b> {meeting.type}</p>\n                <p><b>Agendas:</b> {meeting.agendas.join(\", \")}</p>\n\n                <Tabs defaultActiveKey=\"1\">\n                    {/* Minutes */}\n                    <TabPane tab=\"Minutes\" key=\"1\">\n                        <TextArea\n                            rows={6}\n                            value={minutes}\n                            onChange={e => setMinutes(e.target.value)}\n                            placeholder=\"Type meeting minutes here...\"\n                        />\n                        <Button type=\"primary\" className=\"mt-2\">Save Minutes</Button>\n                    </TabPane>\n\n                    {/* Documents */}\n                    <TabPane tab=\"Documents\" key=\"2\">\n                        <Upload>\n                            <Button icon={<UploadOutlined />}>Upload Document</Button>\n                        </Upload>\n                        <List\n                            className=\"mt-4\"\n                            dataSource={meeting.documents || []}\n                            renderItem={(doc, i) => <List.Item>{doc}</List.Item>}\n                        />\n                    </TabPane>\n                </Tabs>\n            </div>\n\n            {/* Right side - Chat */}\n            <div className=\"w-80 p-4 bg-gray-50 rounded-xl shadow flex flex-col\">\n                <Title level={4}>Meeting Chat</Title>\n                <div className=\"flex-1 overflow-y-auto border p-2 rounded bg-white\">\n                    {chat.map((c, idx) => (\n                        <p key={idx}><b>{c.sender}:</b> {c.text} <small>({c.time})</small></p>\n                    ))}\n                </div>\n                <div className=\"flex mt-2 gap-2\">\n                    <Input\n                        value={message}\n                        onChange={e => setMessage(e.target.value)}\n                        placeholder=\"Type message...\"\n                    />\n                    <Button icon={<SendOutlined />} onClick={handleAddMessage} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MeetingDetails;\n"],"names":["TextArea","Input","TabPane","Tabs","Title","Typography","id","useParams","meeting","useContext","MeetingContext","meetings","find","m","parseInt","useState","minutes","setMinutes","chat","setChat","message","setMessage","className","level","title","date","type","agendas","join","defaultActiveKey","tab","rows","value","onChange","e","target","placeholder","icon","dataSource","documents","renderItem","doc","i","map","c","idx","sender","text","time","onClick","trim","Date","toLocaleTimeString"],"sourceRoot":""}